[
    {
        "label": "persona_natural",
        "importPath": "entidades.persona_natural",
        "description": "entidades.persona_natural",
        "isExtraImport": true,
        "detail": "entidades.persona_natural",
        "documentation": {}
    },
    {
        "label": "persona_natural",
        "importPath": "entidades.persona_natural",
        "description": "entidades.persona_natural",
        "isExtraImport": true,
        "detail": "entidades.persona_natural",
        "documentation": {}
    },
    {
        "label": "persona_natural",
        "importPath": "entidades.persona_natural",
        "description": "entidades.persona_natural",
        "isExtraImport": true,
        "detail": "entidades.persona_natural",
        "documentation": {}
    },
    {
        "label": "biblioteca",
        "importPath": "entidades.biblioteca",
        "description": "entidades.biblioteca",
        "isExtraImport": true,
        "detail": "entidades.biblioteca",
        "documentation": {}
    },
    {
        "label": "biblioteca",
        "importPath": "entidades.biblioteca",
        "description": "entidades.biblioteca",
        "isExtraImport": true,
        "detail": "entidades.biblioteca",
        "documentation": {}
    },
    {
        "label": "entidad",
        "importPath": "entidades.entidad",
        "description": "entidades.entidad",
        "isExtraImport": true,
        "detail": "entidades.entidad",
        "documentation": {}
    },
    {
        "label": "entidad",
        "importPath": "entidades.entidad",
        "description": "entidades.entidad",
        "isExtraImport": true,
        "detail": "entidades.entidad",
        "documentation": {}
    },
    {
        "label": "tipo_pueblo_originario",
        "importPath": "valores",
        "description": "valores",
        "isExtraImport": true,
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "tipo_sexo",
        "importPath": "valores",
        "description": "valores",
        "isExtraImport": true,
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "valores_nombre_elemento_patrimonio_inmaterial",
        "importPath": "valores",
        "description": "valores",
        "isExtraImport": true,
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "valores",
        "description": "valores",
        "isExtraImport": true,
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "rango_ano",
        "importPath": "valores",
        "description": "valores",
        "isExtraImport": true,
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "valores",
        "description": "valores",
        "isExtraImport": true,
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "connect",
        "importPath": "psycopg2",
        "description": "psycopg2",
        "isExtraImport": true,
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "cursor",
        "importPath": "psycopg2._psycopg",
        "description": "psycopg2._psycopg",
        "isExtraImport": true,
        "detail": "psycopg2._psycopg",
        "documentation": {}
    },
    {
        "label": "cursor",
        "importPath": "psycopg2._psycopg",
        "description": "psycopg2._psycopg",
        "isExtraImport": true,
        "detail": "psycopg2._psycopg",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "flow_template",
        "importPath": "flow_template",
        "description": "flow_template",
        "isExtraImport": true,
        "detail": "flow_template",
        "documentation": {}
    },
    {
        "label": "flow_template",
        "importPath": "flow_template",
        "description": "flow_template",
        "isExtraImport": true,
        "detail": "flow_template",
        "documentation": {}
    },
    {
        "label": "persona_juridica",
        "importPath": "entidades.persona_juridica",
        "description": "entidades.persona_juridica",
        "isExtraImport": true,
        "detail": "entidades.persona_juridica",
        "documentation": {}
    },
    {
        "label": "artesano",
        "importPath": "entidades.artesano",
        "description": "entidades.artesano",
        "isExtraImport": true,
        "detail": "entidades.artesano",
        "documentation": {}
    },
    {
        "label": "estudiante",
        "importPath": "entidades.estudiante",
        "description": "entidades.estudiante",
        "isExtraImport": true,
        "detail": "entidades.estudiante",
        "documentation": {}
    },
    {
        "label": "biblioteca_publica",
        "importPath": "entidades.biblioteca_publica",
        "description": "entidades.biblioteca_publica",
        "isExtraImport": true,
        "detail": "entidades.biblioteca_publica",
        "documentation": {}
    },
    {
        "label": "establecimiento_educacional",
        "importPath": "entidades.establecimiento_educacional",
        "description": "entidades.establecimiento_educacional",
        "isExtraImport": true,
        "detail": "entidades.establecimiento_educacional",
        "documentation": {}
    },
    {
        "label": "biblioteca_escolar_cra",
        "importPath": "entidades.biblioteca_escolar_cra",
        "description": "entidades.biblioteca_escolar_cra",
        "isExtraImport": true,
        "detail": "entidades.biblioteca_escolar_cra",
        "documentation": {}
    },
    {
        "label": "artesania",
        "importPath": "entidades.artesania",
        "description": "entidades.artesania",
        "isExtraImport": true,
        "detail": "entidades.artesania",
        "documentation": {}
    },
    {
        "label": "ano",
        "importPath": "entidades.ano",
        "description": "entidades.ano",
        "isExtraImport": true,
        "detail": "entidades.ano",
        "documentation": {}
    },
    {
        "label": "atiende_ano",
        "importPath": "relaciones.atiende_ano",
        "description": "relaciones.atiende_ano",
        "isExtraImport": true,
        "detail": "relaciones.atiende_ano",
        "documentation": {}
    },
    {
        "label": "ano",
        "kind": 2,
        "importPath": "entidades.ano",
        "description": "entidades.ano",
        "peekOfCode": "def ano(cursor, year):\n    year = int(year)\n    cursor.execute(\"INSERT INTO ano (ano) VALUES (%s)\", (year,))",
        "detail": "entidades.ano",
        "documentation": {}
    },
    {
        "label": "artesania",
        "kind": 2,
        "importPath": "entidades.artesania",
        "description": "entidades.artesania",
        "peekOfCode": "def artesania(cursor, nombre_producto, ano_sello, id_artesano, rut_artesano):\n    ano_sello = int(ano_sello)\n    id_artesano = int(id_artesano)\n    rut_artesano = int(rut_artesano)\n    cursor.execute(\n        \"INSERT INTO artesania (nombre_producto,ano_sello,id_artesano,rut_artesano) VALUES (%s,%s,%s,%s) RETURNING id_artesania\",\n        (nombre_producto, ano_sello, id_artesano, rut_artesano),\n    )",
        "detail": "entidades.artesania",
        "documentation": {}
    },
    {
        "label": "artesano",
        "kind": 2,
        "importPath": "entidades.artesano",
        "description": "entidades.artesano",
        "peekOfCode": "def artesano(\n    cursor,\n    cod_comuna,\n    rut,\n    nombre_elemento,\n    nombre,\n    sexo,\n    fecha_nacimiento,\n    direccion,\n    nombre_pueblo_ori,",
        "detail": "entidades.artesano",
        "documentation": {}
    },
    {
        "label": "biblioteca",
        "kind": 2,
        "importPath": "entidades.biblioteca",
        "description": "entidades.biblioteca",
        "peekOfCode": "def biblioteca(cursor, nombre_bib):\n    cursor.execute(\n        \"INSERT INTO biblioteca (nombre_bib) VALUES (%s) RETURNING id_biblioteca\",\n        (nombre_bib,),\n    )\n    id_biblioteca = cursor.fetchone()[0]\n    return int(id_biblioteca)",
        "detail": "entidades.biblioteca",
        "documentation": {}
    },
    {
        "label": "biblioteca_escolar_cra",
        "kind": 2,
        "importPath": "entidades.biblioteca_escolar_cra",
        "description": "entidades.biblioteca_escolar_cra",
        "peekOfCode": "def biblioteca_escolar_cra(cursor, nom_bib, codigo_est):\n    id_biblioteca = biblioteca(cursor, nom_bib)\n    codigo_est = int(codigo_est)\n    cursor.execute(\n        \"INSERT INTO biblioteca_escolar_cra (id_biblioteca,codigo_est) VALUES (%s,%s)\",\n        (id_biblioteca, codigo_est),\n    )\n    return id_biblioteca",
        "detail": "entidades.biblioteca_escolar_cra",
        "documentation": {}
    },
    {
        "label": "biblioteca_publica",
        "kind": 2,
        "importPath": "entidades.biblioteca_publica",
        "description": "entidades.biblioteca_publica",
        "peekOfCode": "def biblioteca_publica(cursor, nom_bib, id_persona_juridica) -> None:\n    id_biblioteca = biblioteca(cursor, nom_bib)\n    cursor.execute(\n        \"INSERT INTO biblioteca_publica (id_biblioteca,id_persona_jur) VALUES (%s,%s)\",\n        (id_biblioteca,id_persona_juridica),\n    )",
        "detail": "entidades.biblioteca_publica",
        "documentation": {}
    },
    {
        "label": "entidad",
        "kind": 2,
        "importPath": "entidades.entidad",
        "description": "entidades.entidad",
        "peekOfCode": "def entidad(cursor, nombre, cod_comuna):\n    cod_comuna = int(cod_comuna)\n    cursor.execute(\n        \"INSERT INTO entidad (nombre,cod_comuna) VALUES (%s,%s) RETURNING id_entidad\",\n        (nombre, cod_comuna),\n    )\n    result = cursor.fetchone()\n    return int(result[0])",
        "detail": "entidades.entidad",
        "documentation": {}
    },
    {
        "label": "establecimiento_educacional",
        "kind": 2,
        "importPath": "entidades.establecimiento_educacional",
        "description": "entidades.establecimiento_educacional",
        "peekOfCode": "def establecimiento_educacional(cursor, nombre, cod_comuna):\n    cod_comuna = int(cod_comuna)\n    cursor.execute(\n        \"INSERT INTO establecimiento_educacional (nombre,cod_comuna) VALUES (%s,%s) RETURNING codigo_est\",\n        (nombre, cod_comuna),\n    )\n    return int(cursor.fetchone()[0])",
        "detail": "entidades.establecimiento_educacional",
        "documentation": {}
    },
    {
        "label": "estudiante",
        "kind": 2,
        "importPath": "entidades.estudiante",
        "description": "entidades.estudiante",
        "peekOfCode": "def estudiante(\n    cursor,\n    cod_comuna,\n    rut,\n    nombre_elemento,\n    nombre,\n    sexo,\n    fecha_nacimiento,\n    direccion,\n    nombre_pueblo_ori,",
        "detail": "entidades.estudiante",
        "documentation": {}
    },
    {
        "label": "persona_juridica",
        "kind": 2,
        "importPath": "entidades.persona_juridica",
        "description": "entidades.persona_juridica",
        "peekOfCode": "def persona_juridica(cursor, nombre, cod_comuna):\n    id_entidad = entidad(cursor, nombre, cod_comuna)\n    cursor.execute(\n        \"INSERT INTO persona_juridica (id_entidad) VALUES (%s)\", (id_entidad,)\n    )\n    return id_entidad",
        "detail": "entidades.persona_juridica",
        "documentation": {}
    },
    {
        "label": "persona_natural",
        "kind": 2,
        "importPath": "entidades.persona_natural",
        "description": "entidades.persona_natural",
        "peekOfCode": "def persona_natural(\n    cursor,\n    cod_comuna,\n    rut,\n    nombre_elemento,\n    nombre,\n    sexo,\n    fecha_nacimiento,\n    direccion,\n    nombre_pueblo_ori,",
        "detail": "entidades.persona_natural",
        "documentation": {}
    },
    {
        "label": "atiende_ano",
        "kind": 2,
        "importPath": "relaciones.atiende_ano",
        "description": "relaciones.atiende_ano",
        "peekOfCode": "def atiende_ano(cursor, id_biblioteca, ano):\n    cursor.execute(\n        \"INSERT INTO atiende_ano (id_biblioteca, ano) VALUES (%s, %s)\",\n        (id_biblioteca, ano),\n    )\n    return cursor.lastrowid",
        "detail": "relaciones.atiende_ano",
        "documentation": {}
    },
    {
        "label": "flow_template",
        "kind": 2,
        "importPath": "flow_template",
        "description": "flow_template",
        "peekOfCode": "def flow_template(closure: Callable[[cursor, Faker], None]):\n    load_dotenv()\n    database = getenv(\"DATABASE_NAME\") or \"postgres\"\n    user = getenv(\"DATABASE_USER\") or \"postgres\"\n    host = getenv(\"DATABASE_HOST\") or \"localhost\"\n    port = getenv(\"DATABASE_PORT\") or \"5432\"\n    fake = Faker(\"es_CL\")\n    conn = connect(database=database, user=user, host=host, port=port)\n    cursor = conn.cursor()\n    closure(cursor, fake)",
        "detail": "flow_template",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "generar_datos",
        "description": "generar_datos",
        "peekOfCode": "def main(cursor, fake):\n    filas_por_entidad = 10\n    personas_juridicas = []\n    personas_naturales = []\n    estudiantes = []\n    artesanos = []\n    codigos_est = []\n    bibs_esc_cra = []\n    if len(sys.argv) > 1 and sys.argv[1] in (\"--first\", \"-f\"):\n        cursor.execute(open(\"cultura.sql\", \"r\").read())",
        "detail": "generar_datos",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "generar_relaciones",
        "description": "generar_relaciones",
        "peekOfCode": "def main(cursor: cursor, fake: Faker):\n    cursor.execute(\"SELECT id_biblioteca FROM biblioteca_escolar_cra\")\n    ids_biblioteca = cursor.fetchall()\n    for id_biblioteca in ids_biblioteca:\n        for y in range(*rango_ano):\n            if fake.boolean(50):\n                atiende_ano(cursor, id_biblioteca[0], y)\nif __name__ == \"__main__\":\n    flow_template(main)",
        "detail": "generar_relaciones",
        "documentation": {}
    },
    {
        "label": "random_run",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def random_run(fake: Faker) -> int:\n    return fake.unique.random_int(*rango_rut_valido)\ndef random_cod_comuna(fake: Faker) -> int:\n    return fake.random_int(*rango_cod_comuna)\ndef random_nombre_elemento(fake: Faker) -> str:\n    return fake.random_element(valores_nombre_elemento_patrimonio_inmaterial)\ndef random_sexo(fake: Faker) -> str:\n    return fake.random_element(tipo_sexo)\ndef random_pueblo_originario(fake: Faker) -> str | None:\n    return fake.random_element(tipo_pueblo_originario)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "random_cod_comuna",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def random_cod_comuna(fake: Faker) -> int:\n    return fake.random_int(*rango_cod_comuna)\ndef random_nombre_elemento(fake: Faker) -> str:\n    return fake.random_element(valores_nombre_elemento_patrimonio_inmaterial)\ndef random_sexo(fake: Faker) -> str:\n    return fake.random_element(tipo_sexo)\ndef random_pueblo_originario(fake: Faker) -> str | None:\n    return fake.random_element(tipo_pueblo_originario)\ndef random_disciplina(fake: Faker) -> str:\n    return fake.random_element(tipo_disciplina_artesano)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "random_nombre_elemento",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def random_nombre_elemento(fake: Faker) -> str:\n    return fake.random_element(valores_nombre_elemento_patrimonio_inmaterial)\ndef random_sexo(fake: Faker) -> str:\n    return fake.random_element(tipo_sexo)\ndef random_pueblo_originario(fake: Faker) -> str | None:\n    return fake.random_element(tipo_pueblo_originario)\ndef random_disciplina(fake: Faker) -> str:\n    return fake.random_element(tipo_disciplina_artesano)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "random_sexo",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def random_sexo(fake: Faker) -> str:\n    return fake.random_element(tipo_sexo)\ndef random_pueblo_originario(fake: Faker) -> str | None:\n    return fake.random_element(tipo_pueblo_originario)\ndef random_disciplina(fake: Faker) -> str:\n    return fake.random_element(tipo_disciplina_artesano)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "random_pueblo_originario",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def random_pueblo_originario(fake: Faker) -> str | None:\n    return fake.random_element(tipo_pueblo_originario)\ndef random_disciplina(fake: Faker) -> str:\n    return fake.random_element(tipo_disciplina_artesano)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "random_disciplina",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def random_disciplina(fake: Faker) -> str:\n    return fake.random_element(tipo_disciplina_artesano)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "rango_cod_comuna",
        "kind": 5,
        "importPath": "valores",
        "description": "valores",
        "peekOfCode": "rango_cod_comuna = (1, 346)\nrango_rut_valido = (10000000, 99999999)\nrango_ano = (1900, 2025)\ntipo_modalidad_actividad = (\"presencial\", \"virtual\", \"ambas\")\ntipo_sexo = (\"mujer\", \"hombre\")\ntipo_disciplina_artesano = (\n    \"alfareria y ceramica\",\n    \"cesteria\",\n    \"canteria y piedras\",\n    \"huesos-cuernos-conchas\",",
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "rango_rut_valido",
        "kind": 5,
        "importPath": "valores",
        "description": "valores",
        "peekOfCode": "rango_rut_valido = (10000000, 99999999)\nrango_ano = (1900, 2025)\ntipo_modalidad_actividad = (\"presencial\", \"virtual\", \"ambas\")\ntipo_sexo = (\"mujer\", \"hombre\")\ntipo_disciplina_artesano = (\n    \"alfareria y ceramica\",\n    \"cesteria\",\n    \"canteria y piedras\",\n    \"huesos-cuernos-conchas\",\n    \"instrumentos musicales y luthier\",",
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "rango_ano",
        "kind": 5,
        "importPath": "valores",
        "description": "valores",
        "peekOfCode": "rango_ano = (1900, 2025)\ntipo_modalidad_actividad = (\"presencial\", \"virtual\", \"ambas\")\ntipo_sexo = (\"mujer\", \"hombre\")\ntipo_disciplina_artesano = (\n    \"alfareria y ceramica\",\n    \"cesteria\",\n    \"canteria y piedras\",\n    \"huesos-cuernos-conchas\",\n    \"instrumentos musicales y luthier\",\n    \"madera\",",
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "tipo_modalidad_actividad",
        "kind": 5,
        "importPath": "valores",
        "description": "valores",
        "peekOfCode": "tipo_modalidad_actividad = (\"presencial\", \"virtual\", \"ambas\")\ntipo_sexo = (\"mujer\", \"hombre\")\ntipo_disciplina_artesano = (\n    \"alfareria y ceramica\",\n    \"cesteria\",\n    \"canteria y piedras\",\n    \"huesos-cuernos-conchas\",\n    \"instrumentos musicales y luthier\",\n    \"madera\",\n    \"marroquineria y talabarteria (cueros)\",",
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "tipo_sexo",
        "kind": 5,
        "importPath": "valores",
        "description": "valores",
        "peekOfCode": "tipo_sexo = (\"mujer\", \"hombre\")\ntipo_disciplina_artesano = (\n    \"alfareria y ceramica\",\n    \"cesteria\",\n    \"canteria y piedras\",\n    \"huesos-cuernos-conchas\",\n    \"instrumentos musicales y luthier\",\n    \"madera\",\n    \"marroquineria y talabarteria (cueros)\",\n    \"metales y orfebreria\",",
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "tipo_disciplina_artesano",
        "kind": 5,
        "importPath": "valores",
        "description": "valores",
        "peekOfCode": "tipo_disciplina_artesano = (\n    \"alfareria y ceramica\",\n    \"cesteria\",\n    \"canteria y piedras\",\n    \"huesos-cuernos-conchas\",\n    \"instrumentos musicales y luthier\",\n    \"madera\",\n    \"marroquineria y talabarteria (cueros)\",\n    \"metales y orfebreria\",\n    \"papel\",",
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "tipo_vinculo",
        "kind": 5,
        "importPath": "valores",
        "description": "valores",
        "peekOfCode": "tipo_vinculo = (\"temporal\", \"contratado\", \"voluntario\")\ntipo_mon_nac = (\n    \"monumento historico mueble\",\n    \"monumento historico inmueble\",\n    \"santuario de la naturaleza\",\n    \"zona tipica\",\n)\ntipo_pat_natural = (\"Monumento natural\", \"parque nacional\", \"reserva nacional\")\ntipo_nivel_educacional = (\"basica\", \"media\")\ntipo_pueblo_originario = [",
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "tipo_mon_nac",
        "kind": 5,
        "importPath": "valores",
        "description": "valores",
        "peekOfCode": "tipo_mon_nac = (\n    \"monumento historico mueble\",\n    \"monumento historico inmueble\",\n    \"santuario de la naturaleza\",\n    \"zona tipica\",\n)\ntipo_pat_natural = (\"Monumento natural\", \"parque nacional\", \"reserva nacional\")\ntipo_nivel_educacional = (\"basica\", \"media\")\ntipo_pueblo_originario = [\n    \"Mapuche\",",
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "tipo_pat_natural",
        "kind": 5,
        "importPath": "valores",
        "description": "valores",
        "peekOfCode": "tipo_pat_natural = (\"Monumento natural\", \"parque nacional\", \"reserva nacional\")\ntipo_nivel_educacional = (\"basica\", \"media\")\ntipo_pueblo_originario = [\n    \"Mapuche\",\n    \"Aymara\",\n    \"Rapa Nui\",\n    \"Atacamenos\",\n    \"Quechua\",\n    \"Colla\",\n    \"Chango\",",
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "tipo_nivel_educacional",
        "kind": 5,
        "importPath": "valores",
        "description": "valores",
        "peekOfCode": "tipo_nivel_educacional = (\"basica\", \"media\")\ntipo_pueblo_originario = [\n    \"Mapuche\",\n    \"Aymara\",\n    \"Rapa Nui\",\n    \"Atacamenos\",\n    \"Quechua\",\n    \"Colla\",\n    \"Chango\",\n    \"Diaguita\",",
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "tipo_pueblo_originario",
        "kind": 5,
        "importPath": "valores",
        "description": "valores",
        "peekOfCode": "tipo_pueblo_originario = [\n    \"Mapuche\",\n    \"Aymara\",\n    \"Rapa Nui\",\n    \"Atacamenos\",\n    \"Quechua\",\n    \"Colla\",\n    \"Chango\",\n    \"Diaguita\",\n    \"Kawesqar\",",
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "valores_ambito_patrimonio",
        "kind": 5,
        "importPath": "valores",
        "description": "valores",
        "peekOfCode": "valores_ambito_patrimonio = [\n    \"Artes del espectáculo\",\n    \"Conocimientos y usos relacionados con la naturaleza y el universo\",\n    \"Técnicas Artesanales tradicionales\",\n    \"Tradiciones y Expresiones Orales\",\n    \"Usos sociales, rituales y actos festivos\",\n]\nvalores_nombre_elemento_patrimonio_inmaterial = [\n    \"Baile de morenos de paso en la región de Arica y Parinacota\",\n    \"Tradición de las Cruces de Mayo afrodescendientes en los valles de Azapa, Lluta y Acha\",",
        "detail": "valores",
        "documentation": {}
    },
    {
        "label": "valores_nombre_elemento_patrimonio_inmaterial",
        "kind": 5,
        "importPath": "valores",
        "description": "valores",
        "peekOfCode": "valores_nombre_elemento_patrimonio_inmaterial = [\n    \"Baile de morenos de paso en la región de Arica y Parinacota\",\n    \"Tradición de las Cruces de Mayo afrodescendientes en los valles de Azapa, Lluta y Acha\",\n    \"Baile de morenos de paso en la región de Arica y Parinacota\",\n    \"Bailes chinos\",\n    \"Danza cachimbo de las comunas de Pica, Huara y Pozo Almonte\",\n    \"Baile de morenos de paso en la región de Arica y Parinacota\",\n    \"Bailes chinos\",\n    \"Bailes Devocionales de la Oficina Salitrera Pedro de Valdivia\",\n    \"Bailes tradicionales de San Pedro de Atacama\",",
        "detail": "valores",
        "documentation": {}
    }
]